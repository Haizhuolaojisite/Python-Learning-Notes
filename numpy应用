Matplotlib，Numpy，SciPy 和 Pandas 这几个库在我们使用 Python 从事数据科学工作时都不可或缺，不过它们的用途并不相同：

1. Numpy：为大型多维数组和矩阵添加 Python 支持，并提供高级的数学函数来运算这些数组。

2. SciPy：基于 Numpy，汇集了一系列的数学算法和便捷的函数。它可以向开发者提供用于数据操作与可视化的高级命令和类，是构建交互式 Python 会话的强大工具。

3. Pandas：面向数据操作和分析的 Python 库，提供用于处理数字图表和时序数据的数据结构和操作功能。

4. Matplotlib：Python 中常用的绘图库，能在跨平台的交互式环境生成高质量图形。后来在它的基础上又衍生了更为高级的绘图库 Seaborn。

总的来说，如果你想理解和处理手头的数据，就用 Pandas；

如果你想执行一些复杂的计算，就用 Numpy 和 SciPy；

如果你想将数据可视化，就用 Matplotlib。

Numpy
——————————————————————————————————————————————————————————————————————————
1. dtype(查看数据元素类型）

demo = np.array([1,2,3,4,5,6,7])
demo.dtype
dtype('int32')

2. ndim(输出数组维度的个数（轴数），维度的数量也称rank)
demo.ndim
1

3. shape(数组的维度，几行几列）
demo.shape
(7,)

4. size(数组元素总数）
demo.size
7

5. itemsize(数组中每个元素的字节大小，int32类型字节为4，float64字节为8）
demo.itemsize
4

6. nbytes(共多少字节）
demo.nbytes
28

7. 创建数组：array(),括号里是列表，元组，数组，生成器
np.array(range(10))
array([0,1,2,3,4,5,6,7,8,9])

np.array([1,2,3],("a","b","c")]
array([['1','2','3'],['a','b','c']],dtype='<U11')

8. arrange(),给定间隔内返回均匀间隔值
np.arrange(10.0)
array([0.,1.,2.,3.,4.,5.,6.,7.,8.,9.])

np.arrange(5,12,3)
array([5,8,11])

9. linespace(),返回在间隔[开始，停止]上计算的num个均匀间隔的样本
np.linespace(2.0,3.0,num=5)
->array([2.,2.25,2.5,2.75,3.])

np.linespace(2.0,3.0,num=5,endpoint=False)
->array([2.,2.2,2.4,2.6,2.8])

np.linespace(2.0,3.0,num=5,retstep=True)
->array([2., 2.25, 2.5, 2.75, 3. ),0.25)

10. 创建数组，zeros(),ones(),eye()
np.zeros((2,2), dtype = np.int)
-> array([0, 0],[0,0])

np.ones((2,3,4))
-> array([[[1., 1., 1., 1.],
           [1., 1., 1., 1.],
           [1., 1., 1., 1.]],
           
           [[1., 1., 1., 1.],
            [1., 1., 1., 1.],
            [1., 1., 1., 1.]]])
np.eye(5）
-> array([[1., 0., 0., 0., 0.],
          [0., 1., 0., 0., 0.],
          [0., 0., 1., 0., 0.],
          [0., 0., 0., 1., 0.],
          [0., 0., 0., 0., 1.]])

11. 改变数组形状：.T, reshape(), resize()
ar1 = np.array([1,2,3],[4,5,6])
ar1
->array([1,2,3],
        [4,5,6])
ar1.T
array([[1,4],
       [2,5],
       [3,6])
ar1.reshape(3,2)
--> array([[1,2],
           [3,4],
           [5,6]])
np.resize(np.arange(5),(3,4))
--> array([[0,1,2,3],
           [4,0,1,2],
           [3,4,0,1]])
           
12. 数组赋值：copy()
ar1 = np.arange(10)
ar2 = ar1
id(ar2) == id(ar1)
#这里ar1和ar2指向同一个值，所以ar1改变，ar2一起改变
-->True
ar3 = ar1.copy()
id(ar3) == id(ar1)
False
           
13.数组类型转换：astype()
ar1.astype(np.float32)
-->array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.], dtype = float32)

14. 水平叠加
a=array([0,1,2,3,4])
b=array([5,6,7,8,9])
np.hstack((a,b))
-->array([0,1,2,3,4,5,6,7,8,9])
          
np.concatenate((a,b),axis=0)
-->array([0,1,2,3,4,5,6,7,8,9])

15.垂直叠加
np.vstack(a,b))
-->array([[0,1,2,3,4]
          [5,6,7,8,9]])

np.rowstack((a,b))
-->array([[0,1,2,3,4],
          [5,6,7,8,9])

16. 深度叠加
 
 np.dstack((a,b))
 -->array([[[0,5],
          [1,6],
          [2,7],
          [3,8],
          [4,9]]])
          
 17. 数组拆分
 ar = np.arrange(16).reshape(4,4)
 ar
 -->array([[0,1,2,3],
           [4,5,6,7],
           [8,9,10,11],
           [12,13,14,15]])
 
 18. 沿横向轴拆分
 np.hsplit(ar,2)
[array([[0,1],
        [4,5],
        [8,9],
        [12,13]]), array([[2,3],
        [6,7],
        [10,11],
        [14,15]])]
 
 np.split(ar, 2, axis = 1)
 [array([[0,1],
        [4,5],
        [8,9],
        [12,13]]), array([[2,3],
        [6,7],
        [10,11],
        [14,15]])]
        
  19. 沿纵向轴拆分
  np.vsplit(ar, 2)
  -->[array([[0,1,2,3],
            [4,5,6,7]]),array([[8,9,10,11],
            [12,13,14,15]])]
  np.split(ar, 2, axis = 0)
  -->[array([[0,1,2,3],
             [4,5,6,7]]),array([[8,9,10,11],
             [12,13,14,15]])]
             
  20. 数组转换成list
  ar
  array([[0,1,2,3],
         [4,5,6,7],
         [8,9,10,11],
         [12,13,14,15]])
 ar.tolist()
 [[0,1,2,3],[4,5,6,7],[8,9,10,11],[12,13,14,15]]
 
 21. 设置打印时显示方式: np.set_printoptions()
 >>> np.set_printoptions(precision=4)
>>> print np.array([1.123456789])
[ 1.1235]

>>> np.set_printoptions(threshold=5)
>>> print np.arange(10)
[0 1 2 ..., 7 8 9]

>>> eps = np.finfo(float).eps
>>> x = np.arange(4.)
>>> x**2 - (x + eps)**2
array([ -4.9304e-32,  -4.4409e-16,   0.0000e+00,   0.0000e+00])
>>> np.set_printoptions(suppress=True)
>>> x**2 - (x + eps)**2
array([-0., -0.,  0.,  0.])

22. 二维数组的切片和索引
ar = np.arange(16).reshape(4,4)
-->array([[0,1,2,3],
          [4,5,6,7],
          [8,9,10,11],
          [12,13,14,15]])
ar[:2,1:]
-->array([[1,2,3],
          [5,6,7]])

23. 随机数生成
np.random.normal(size=(4,4))
--> 4x4的array

np.random.rand() #生成一个[0,1)之间的随机浮点数或N维浮点数组---均匀分布
--> 0.5718965755174878

np.random.rand(4)
-->array([0.50897674, 0.96063824, 0.30698317, 0.41407583])

np.random.rand(2,3)
-->array([[0.88528773,0,87437328,0.02799432],
          [0.21416104,0.03953028,0.85786322]])

np.random.randint(low,high=None,size=None,dtype='l') #生成一个整数或N维整数数组

np.random.randint(2)
0

np.random.randint(2,size=5)
array([0,0,1,0,0])

np.random.randint(2,6,size=5)
array([2,2,3,2,2])

24. 存储数组数据
ar = np.random.rand(5,5)
np.save('arraydata.npy', ar)

25. 读取数组数据
np.load("arraydata.npy")
 
            
            
            
            


